// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: book.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Book_EnumSample: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case started // = 1
  static let running = started
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .started
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .started: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Book_Book {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isbn: Int64 = 0

  var title: String = String()

  var author: String = String()

  var pages: Int32 = 0

  var isActivate: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Book_GetBookRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isbn: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Book_GetBooksResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Book_Book] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Book_GetBookViaAuthor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var author: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Book_GetTypesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dbl: Double = 0

  var flt: Float = 0

  var intr32: Int32 = 0

  var intr64: Int64 = 0

  var uintr32: UInt32 = 0

  var uintr64: UInt64 = 0

  var suint32: Int32 = 0

  var suint64: Int64 = 0

  var fxd32: UInt32 = 0

  var fxd64: UInt64 = 0

  var sfxd32: Int32 = 0

  var sfxd64: Int64 = 0

  var bln: Bool = false

  var str: String = String()

  var bytx: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Book_GetTypesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dbl: Double = 0

  var flt: Float = 0

  var intr32: Int32 = 0

  var intr64: Int64 = 0

  var uintr32: UInt32 = 0

  var uintr64: UInt64 = 0

  var suint32: Int32 = 0

  var suint64: Int64 = 0

  var fxd32: UInt32 = 0

  var fxd64: UInt64 = 0

  var sfxd32: Int32 = 0

  var sfxd64: Int64 = 0

  var bln: Bool = false

  var str: String = String()

  var bytx: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Book_BookStore {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var books: Dictionary<Int64,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Message with reserved keywords
/// see: https://github.com/google/protobuf/blob/cc3fa2ec80d196e045ae05797799f079188106f3/js/compatibility_tests/v3.0.0/test.proto#L66-L72
struct Book_SpecialCases {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var normal: String = String()

  /// Examples of Js reserved names that are converted to pb_<name>.
  var `default`: String = String()

  var function: String = String()

  var `var`: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "book"

extension Book_EnumSample: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .aliased(proto: "STARTED", aliases: ["RUNNING"]),
  ]
}

extension Book_Book: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Book"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isbn"),
    2: .same(proto: "title"),
    3: .same(proto: "author"),
    4: .same(proto: "pages"),
    5: .same(proto: "isActivate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.isbn)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.author)
      case 4: try decoder.decodeSingularInt32Field(value: &self.pages)
      case 5: try decoder.decodeSingularBoolField(value: &self.isActivate)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isbn != 0 {
      try visitor.visitSingularInt64Field(value: self.isbn, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.author.isEmpty {
      try visitor.visitSingularStringField(value: self.author, fieldNumber: 3)
    }
    if self.pages != 0 {
      try visitor.visitSingularInt32Field(value: self.pages, fieldNumber: 4)
    }
    if self.isActivate != false {
      try visitor.visitSingularBoolField(value: self.isActivate, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Book_Book) -> Bool {
    if self.isbn != other.isbn {return false}
    if self.title != other.title {return false}
    if self.author != other.author {return false}
    if self.pages != other.pages {return false}
    if self.isActivate != other.isActivate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Book_GetBookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBookRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isbn"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.isbn)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isbn != 0 {
      try visitor.visitSingularInt64Field(value: self.isbn, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Book_GetBookRequest) -> Bool {
    if self.isbn != other.isbn {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Book_GetBooksResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBooksResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "items"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Book_GetBooksResponse) -> Bool {
    if self.items != other.items {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Book_GetBookViaAuthor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBookViaAuthor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "author"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.author)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.author.isEmpty {
      try visitor.visitSingularStringField(value: self.author, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Book_GetBookViaAuthor) -> Bool {
    if self.author != other.author {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Book_GetTypesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTypesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dbl"),
    2: .same(proto: "flt"),
    3: .same(proto: "intr32"),
    4: .same(proto: "intr64"),
    5: .same(proto: "uintr32"),
    6: .same(proto: "uintr64"),
    7: .same(proto: "suint32"),
    8: .same(proto: "suint64"),
    9: .same(proto: "fxd32"),
    10: .same(proto: "fxd64"),
    11: .same(proto: "sfxd32"),
    12: .same(proto: "sfxd64"),
    13: .same(proto: "bln"),
    14: .same(proto: "str"),
    15: .same(proto: "bytx"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.dbl)
      case 2: try decoder.decodeSingularFloatField(value: &self.flt)
      case 3: try decoder.decodeSingularInt32Field(value: &self.intr32)
      case 4: try decoder.decodeSingularInt64Field(value: &self.intr64)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.uintr32)
      case 6: try decoder.decodeSingularUInt64Field(value: &self.uintr64)
      case 7: try decoder.decodeSingularSInt32Field(value: &self.suint32)
      case 8: try decoder.decodeSingularSInt64Field(value: &self.suint64)
      case 9: try decoder.decodeSingularFixed32Field(value: &self.fxd32)
      case 10: try decoder.decodeSingularFixed64Field(value: &self.fxd64)
      case 11: try decoder.decodeSingularSFixed32Field(value: &self.sfxd32)
      case 12: try decoder.decodeSingularSFixed64Field(value: &self.sfxd64)
      case 13: try decoder.decodeSingularBoolField(value: &self.bln)
      case 14: try decoder.decodeSingularStringField(value: &self.str)
      case 15: try decoder.decodeSingularBytesField(value: &self.bytx)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dbl != 0 {
      try visitor.visitSingularDoubleField(value: self.dbl, fieldNumber: 1)
    }
    if self.flt != 0 {
      try visitor.visitSingularFloatField(value: self.flt, fieldNumber: 2)
    }
    if self.intr32 != 0 {
      try visitor.visitSingularInt32Field(value: self.intr32, fieldNumber: 3)
    }
    if self.intr64 != 0 {
      try visitor.visitSingularInt64Field(value: self.intr64, fieldNumber: 4)
    }
    if self.uintr32 != 0 {
      try visitor.visitSingularUInt32Field(value: self.uintr32, fieldNumber: 5)
    }
    if self.uintr64 != 0 {
      try visitor.visitSingularUInt64Field(value: self.uintr64, fieldNumber: 6)
    }
    if self.suint32 != 0 {
      try visitor.visitSingularSInt32Field(value: self.suint32, fieldNumber: 7)
    }
    if self.suint64 != 0 {
      try visitor.visitSingularSInt64Field(value: self.suint64, fieldNumber: 8)
    }
    if self.fxd32 != 0 {
      try visitor.visitSingularFixed32Field(value: self.fxd32, fieldNumber: 9)
    }
    if self.fxd64 != 0 {
      try visitor.visitSingularFixed64Field(value: self.fxd64, fieldNumber: 10)
    }
    if self.sfxd32 != 0 {
      try visitor.visitSingularSFixed32Field(value: self.sfxd32, fieldNumber: 11)
    }
    if self.sfxd64 != 0 {
      try visitor.visitSingularSFixed64Field(value: self.sfxd64, fieldNumber: 12)
    }
    if self.bln != false {
      try visitor.visitSingularBoolField(value: self.bln, fieldNumber: 13)
    }
    if !self.str.isEmpty {
      try visitor.visitSingularStringField(value: self.str, fieldNumber: 14)
    }
    if !self.bytx.isEmpty {
      try visitor.visitSingularBytesField(value: self.bytx, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Book_GetTypesRequest) -> Bool {
    if self.dbl != other.dbl {return false}
    if self.flt != other.flt {return false}
    if self.intr32 != other.intr32 {return false}
    if self.intr64 != other.intr64 {return false}
    if self.uintr32 != other.uintr32 {return false}
    if self.uintr64 != other.uintr64 {return false}
    if self.suint32 != other.suint32 {return false}
    if self.suint64 != other.suint64 {return false}
    if self.fxd32 != other.fxd32 {return false}
    if self.fxd64 != other.fxd64 {return false}
    if self.sfxd32 != other.sfxd32 {return false}
    if self.sfxd64 != other.sfxd64 {return false}
    if self.bln != other.bln {return false}
    if self.str != other.str {return false}
    if self.bytx != other.bytx {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Book_GetTypesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTypesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dbl"),
    2: .same(proto: "flt"),
    3: .same(proto: "intr32"),
    4: .same(proto: "intr64"),
    5: .same(proto: "uintr32"),
    6: .same(proto: "uintr64"),
    7: .same(proto: "suint32"),
    8: .same(proto: "suint64"),
    9: .same(proto: "fxd32"),
    10: .same(proto: "fxd64"),
    11: .same(proto: "sfxd32"),
    12: .same(proto: "sfxd64"),
    13: .same(proto: "bln"),
    14: .same(proto: "str"),
    15: .same(proto: "bytx"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.dbl)
      case 2: try decoder.decodeSingularFloatField(value: &self.flt)
      case 3: try decoder.decodeSingularInt32Field(value: &self.intr32)
      case 4: try decoder.decodeSingularInt64Field(value: &self.intr64)
      case 5: try decoder.decodeSingularUInt32Field(value: &self.uintr32)
      case 6: try decoder.decodeSingularUInt64Field(value: &self.uintr64)
      case 7: try decoder.decodeSingularSInt32Field(value: &self.suint32)
      case 8: try decoder.decodeSingularSInt64Field(value: &self.suint64)
      case 9: try decoder.decodeSingularFixed32Field(value: &self.fxd32)
      case 10: try decoder.decodeSingularFixed64Field(value: &self.fxd64)
      case 11: try decoder.decodeSingularSFixed32Field(value: &self.sfxd32)
      case 12: try decoder.decodeSingularSFixed64Field(value: &self.sfxd64)
      case 13: try decoder.decodeSingularBoolField(value: &self.bln)
      case 14: try decoder.decodeSingularStringField(value: &self.str)
      case 15: try decoder.decodeSingularBytesField(value: &self.bytx)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dbl != 0 {
      try visitor.visitSingularDoubleField(value: self.dbl, fieldNumber: 1)
    }
    if self.flt != 0 {
      try visitor.visitSingularFloatField(value: self.flt, fieldNumber: 2)
    }
    if self.intr32 != 0 {
      try visitor.visitSingularInt32Field(value: self.intr32, fieldNumber: 3)
    }
    if self.intr64 != 0 {
      try visitor.visitSingularInt64Field(value: self.intr64, fieldNumber: 4)
    }
    if self.uintr32 != 0 {
      try visitor.visitSingularUInt32Field(value: self.uintr32, fieldNumber: 5)
    }
    if self.uintr64 != 0 {
      try visitor.visitSingularUInt64Field(value: self.uintr64, fieldNumber: 6)
    }
    if self.suint32 != 0 {
      try visitor.visitSingularSInt32Field(value: self.suint32, fieldNumber: 7)
    }
    if self.suint64 != 0 {
      try visitor.visitSingularSInt64Field(value: self.suint64, fieldNumber: 8)
    }
    if self.fxd32 != 0 {
      try visitor.visitSingularFixed32Field(value: self.fxd32, fieldNumber: 9)
    }
    if self.fxd64 != 0 {
      try visitor.visitSingularFixed64Field(value: self.fxd64, fieldNumber: 10)
    }
    if self.sfxd32 != 0 {
      try visitor.visitSingularSFixed32Field(value: self.sfxd32, fieldNumber: 11)
    }
    if self.sfxd64 != 0 {
      try visitor.visitSingularSFixed64Field(value: self.sfxd64, fieldNumber: 12)
    }
    if self.bln != false {
      try visitor.visitSingularBoolField(value: self.bln, fieldNumber: 13)
    }
    if !self.str.isEmpty {
      try visitor.visitSingularStringField(value: self.str, fieldNumber: 14)
    }
    if !self.bytx.isEmpty {
      try visitor.visitSingularBytesField(value: self.bytx, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Book_GetTypesResponse) -> Bool {
    if self.dbl != other.dbl {return false}
    if self.flt != other.flt {return false}
    if self.intr32 != other.intr32 {return false}
    if self.intr64 != other.intr64 {return false}
    if self.uintr32 != other.uintr32 {return false}
    if self.uintr64 != other.uintr64 {return false}
    if self.suint32 != other.suint32 {return false}
    if self.suint64 != other.suint64 {return false}
    if self.fxd32 != other.fxd32 {return false}
    if self.fxd64 != other.fxd64 {return false}
    if self.sfxd32 != other.sfxd32 {return false}
    if self.sfxd64 != other.sfxd64 {return false}
    if self.bln != other.bln {return false}
    if self.str != other.str {return false}
    if self.bytx != other.bytx {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Book_BookStore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BookStore"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "books"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: &self.books)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.books.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt64,SwiftProtobuf.ProtobufString>.self, value: self.books, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Book_BookStore) -> Bool {
    if self.name != other.name {return false}
    if self.books != other.books {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Book_SpecialCases: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpecialCases"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "normal"),
    2: .same(proto: "default"),
    3: .same(proto: "function"),
    4: .same(proto: "var"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.normal)
      case 2: try decoder.decodeSingularStringField(value: &self.`default`)
      case 3: try decoder.decodeSingularStringField(value: &self.function)
      case 4: try decoder.decodeSingularStringField(value: &self.`var`)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.normal.isEmpty {
      try visitor.visitSingularStringField(value: self.normal, fieldNumber: 1)
    }
    if !self.`default`.isEmpty {
      try visitor.visitSingularStringField(value: self.`default`, fieldNumber: 2)
    }
    if !self.function.isEmpty {
      try visitor.visitSingularStringField(value: self.function, fieldNumber: 3)
    }
    if !self.`var`.isEmpty {
      try visitor.visitSingularStringField(value: self.`var`, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Book_SpecialCases) -> Bool {
    if self.normal != other.normal {return false}
    if self.`default` != other.`default` {return false}
    if self.function != other.function {return false}
    if self.`var` != other.`var` {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
