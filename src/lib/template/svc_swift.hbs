// Autogenerated. Do not modify!
// package: {{{packageName}}}
// file: {{{fileName}}}

import Foundation
import SwiftGRPC

{{#each services}}
@objc({{{serviceName}}}Service)
class {{{serviceName}}}Service: NSObject {
{{#each methods}}

  @objc func {{{lcFirst methodName}}}(_ {{{requestMapFrom}}}: [String: Any], resolve: RCTPromiseResolveBlock, reject: RCTPromiseRejectBlock) -> Void {
    var {{{requestMapTo}}} = {{{requestTypeName}}}

    // request mapping
{{{requestMapping}}}
    // end request mapping

    do {
      let {{{responseMapFrom}}} = try GrpcConfig.{{{serviceName}}}Client!.{{{lcFirst methodName}}}({{{requestMapTo}}})
      var {{{responseMapTo}}}: [String: Any] = [:]

      // response mapping
{{{responseMapping}}}
      // end response mapping

      resolve({{{responseMapTo}}})
    } catch RPCError.callError(let err) {
      reject(String(err.statusCode.rawValue), err.statusMessage, err as? Error)
    } catch {
      reject("-1", error.localizedDescription, error)
    }
  }
{{/each}}
  
  @objc
  static func requiresMainQueueSetup() -> Bool {
    return false
  }
}
{{/each}}